minimum-vagga: v0.8.0

mixins:
  - vagga/trunk.yaml
  - vagga/production.yaml

containers:
  _base_alpine:
    setup:
    - !Alpine v3.8
    - !EnsureDir /config
    - !Sh "chmod +r /bin/bbsuid"

  frontend:
    setup:
    - !Container _base_alpine
    - !Env
      TRAVIS: true
      NODE_PATH: /usr/lib/node_modules
    - !EnsureDir /usr/lib/node_modules/.cache
    - !NpmDependencies
      file: package.json
      peer: true
      optional: true
      dev: true
    - !Install
      - gettext
    environ:
      NODE_PATH: /usr/lib/node_modules
    volumes:
      /work/node_modules: !Empty

  assets:
    setup:
      - !Container frontend
      - !EnsureDir /static
      - !RunAs
        work-dir: templates/skin/synio/locale/ru_RU/LC_MESSAGES
        script: &compile_locales |
          msgcat -n -F -o messages.po parts/*
          msgfmt messages.po
          po2json -f jed1.x messages.po messages.json
          rm messages.po
      - !Build
        container: frontend
        source: /usr/lib/node_modules
        temporary-mount: /work/node_modules
      - !Env
        NODE_ENV: production
        NODE_PATH: /usr/lib/node_modules
        BABEL_CACHE_PATH: /tmp/.babel.json
      - !Sh webpack --color --progress -p
      - !Copy
        source: /work/static
        path: /static
    data-dirs: [/static]

  celery-dev:
    setup:
    - !Container _base_alpine
    - !Install [python3]
    - !PipConfig
      dependencies: true
    - !Py3Install
      - celery[redis]
      - beautifulsoup4
      - elasticsearch
    - !EnsureDir /app

  redis-dev:
    setup:
    - !Container _base_alpine
    - !Install [redis]

  nginx:
    setup:
    - !Container _base_alpine
    - !Install [nginx]
    - !EnsureDir /storage

  mysql-dev:
    setup:
    - !Container _base_alpine
    - !Install
      - mariadb
      - mariadb-client
    - !EnsureDir /storage

  _php-base:
    setup:
    - !Ubuntu bionic
    - !UbuntuUniverse
    - !Install
      - php
      - php-fpm
      - php-mysql
      - php-redis
      - php-gettext
      - php-json
      - php-curl
      - php-imagick
      - php-bcmath
      - php-mbstring
      - imagemagick
    - !BuildDeps [unzip]
    - !ComposerConfig
      install_runtime: false
      runtime_exe: /usr/bin/php
    - !ComposerDependencies
      optimize_autoloader: true
    - !EnsureDir /log
    - !EnsureDir /storage
    - !EnsureDir /config
    - !EnsureDir /static
    - !EnsureDir /app

  php-dev:
    setup:
      - !Container _php-base
      - !Install
        - php-xdebug
        - git

  elastic-dev:
    setup:
    - !Ubuntu bionic
    - !UbuntuUniverse
    - !EnsureDir /config
    - !BuildDeps [gnupg]
    - !AptTrust
      server: keyserver.ubuntu.com
      keys: [D27D666CD88E42B4]
    - !UbuntuRepo
      url: https://artifacts.elastic.co/packages/6.x/apt
      suite: stable
      components: [main]
    - !Install
      - ca-certificates
      - ca-certificates-java
      - openjdk-8-jre-headless
      - elasticsearch=6.2.3
    - !EnsureDir /storage

  mail-dev:
    setup:
      - !Alpine v3.8
      - !Install [libstdc++, ruby-json, ruby-etc, sqlite-libs]
      - !BuildDeps [sqlite-dev]
      - !GemInstall [mailcatcher]

commands:
  _mk-node-modules-dir: !Command
    container: _base_alpine
    run: mkdir -p /work/node_modules

  _init_db: !Command
    description: Initialize and populate MySQL database
    container: mysql-dev
    environ:
      DB_HOST: 127.0.0.1
      DB_DATABASE: tabun
      DB_USERNAME: tabun
      DB_PASSWORD: tabun
    run: |
      mysql_install_db
      mysqld_safe --skip-syslog --no-auto-restart
      while [ ! -f /tmp/mysqld.pid ]; do sleep 0.1; done
      mysqladmin create $DB_DATABASE
      mysql -e "CREATE USER '$DB_USERNAME'@'$DB_HOST' IDENTIFIED BY '$DB_PASSWORD';"
      mysql -e "GRANT ALL PRIVILEGES ON $DB_DATABASE.* TO '$DB_USERNAME'@'$DB_HOST';"
      mysqladmin flush-privileges

      MYSQL="mysql --user=$DB_USERNAME --password=$DB_PASSWORD --database=$DB_DATABASE"

      for migration in $(ls -v /work/fixtures/migrations) ; do
        echo "Applying migration $migration"
        $MYSQL < /work/fixtures/migrations/$migration
      done

      for data in $(ls -v /work/fixtures/data) ; do
        echo "Populating database with $data"
        $MYSQL < /work/fixtures/data/$data
      done

      mysqladmin shutdown
    volumes:
      /etc/mysql: !BindRO /work/config/local/mysql
      /storage: !Persistent {name: mysql}

  _load_fixture: !Command
    description: Load fixture into database
    container: mysql-dev
    environ:
      DB_HOST: 127.0.0.1
      DB_DATABASE: tabun
      DB_USERNAME: tabun
      DB_PASSWORD: tabun
    accepts-arguments: true
    run: |
      mysqld_safe --skip-syslog --no-auto-restart
      while [ ! -f /tmp/mysqld.pid ]; do sleep 0.1; done
      if [ "$#" = 1 ] ; then
        case "$1" in
          *.gz )
            echo "Loading compressed data from $1"
            viewer=zcat
            ;;
          *)
            echo "Loading raw data from $1"
            viewer=cat
            ;;
        esac
        $viewer $1 | mysql --user=$DB_USERNAME --password=$DB_PASSWORD --database=$DB_DATABASE
      fi
      mysqladmin shutdown

  build-static: !Command
    description: Build static
    container: frontend
    prerequisites: [compile-locales]
    volumes: &node_volumes
      /work/node_modules: !BindRO /vagga/root/usr/lib/node_modules
      /usr/lib/node_modules/.cache: !Persistent node_cache
    run: webpack --color --progress -p

  compile-locales: !Command
    container: frontend
    description: Comlile locale files
    work-dir: templates/skin/synio/locale/ru_RU/LC_MESSAGES
    run: *compile_locales

  reindex: !Command
    container: php-dev
    description: Rebuild ES index
    work-dir: engine/console
    accepts-arguments: true
    environ:
      CONFIG: /config/app.conf.php
      COMPOSER_DIR: /usr/local/lib/composer
    run: [php, ls, reindex]

  webpack: !Command
    container: frontend
    prerequisites: [_mk-node-modules-dir, compile-locales]
    description: Webpack CLI
    volumes: *node_volumes
    run: [webpack]

  redis-cli: !Command
    container: redis-dev
    description: Run redis CLI
    run: [redis-cli]

  redis: &redis !Command
    container: redis-dev
    description: Run redis server (cache and broker for celery)
    run: [redis-server, --port, 6379]
    volumes:
      /var/lib/redis: !Tmpfs

  nginx: &nginx !Command
    container: nginx
    description: Run nginx webserver
    run: [nginx]
    volumes:
      /etc/nginx/nginx.conf: !BindRO /work/config/local/nginx.conf
      /storage: !Persistent {name: storage}
      /var/log/nginx: !Snapshot

  mysql: &mysql !Command
    container: mysql-dev
    description: Run mysql database server
    user-id: 1
    external-user-id: 0
    run: mysqld_safe --skip-syslog --console --debug-gdb
    volumes:
      /etc/mysql: !BindRO /work/config/local/mysql
      /storage: !Persistent {name: mysql, init-command: _init_db}

  mail: &mail !Command
    container: mail-dev
    description: Run simple mail server (just for test)
    run: [mailcatcher, --foreground]

  celery: &celery !Command
    container: celery-dev
    description: Run celery worker for async tasks
    user-id: 1
    group-id: 1
    external-user-id: 0
    run: celery worker --pool=solo
    volumes:
      /config: !BindRO /work/config/local/celery
      /app: !BindRO /work/celery_tasks
    environ:
      PYTHONPATH: /config:/app
      CELERY_CONFIG_MODULE: cfg
      CELERY_MAILER_HOST: localhost
      CELERY_MAILER_PORT: 1025

  php: &php !Command
    prerequisites: [compile-locales]
    container: php-dev
    description: Run php-fpm (application)
    user-id: 1
    external-user-id: 0
    run: [php-fpm7.2, -eFO]
    volumes:
      /config: !BindRO /work/config/local
      /storage: !Persistent {name: storage}
      /static: !BindRO /work/static
      /app: !BindRO /work
      /etc/php/7.2/fpm/pool.d/www.conf: !BindRO /work/config/local/php.conf
      /var/log: !Snapshot

  elastic: &elastic !Command
    container: elastic-dev
    description: Run elasticsearch
    user-id: 1
    external-user-id: 0
    work-dir: /usr/share/elasticsearch
    run: ./bin/elasticsearch
    volumes:
      /etc/elasticsearch: !BindRO /work/config/local/elasticsearch
      /storage: !Persistent {name: elastic}

  run: !Supervise
    description: Run full server stack
    kill-unresponsive-after: 5
    children:
      redis: *redis
      nginx: *nginx
      mysql: *mysql
      mail: *mail
      celery: *celery
      php: *php
      elastic: *elastic
